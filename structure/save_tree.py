# structure/save_tree.py
import os
from pathlib import Path
from fnmatch import fnmatch


def load_gitignore_patterns(gitignore_path: str) -> list[str]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏–∑ .gitignore
    """
    patterns = []
    with open(gitignore_path, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if not line or line.startswith('#'):
                continue

            # –£–±–∏—Ä–∞–µ–º —Ö–≤–æ—Å—Ç–æ–≤–æ–π —Å–ª—ç—à
            pattern = line.rstrip('/')

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /) ‚Üí –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π glob-–ø—É—Ç—å
            if pattern.startswith('/'):
                pattern = pattern.lstrip('/')

            patterns.append(pattern)
    return patterns


def is_ignored(path: Path, patterns: list[str], project_root: Path) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—É—Ç—å –æ–¥–Ω–æ–º—É –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ .gitignore
    """
    relative = path.relative_to(project_root)
    for pattern in patterns:
        if fnmatch(str(relative), pattern) or any(fnmatch(part, pattern) for part in relative.parts):
            return True
    return False


def save_tree(start_path: str, out_file: str, ignore_patterns: list[str]) -> None:
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–∞–π–ª, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –∏–∑ .gitignore.
    –ü–∞–ø–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–µ—Ä–µ–¥ —Ñ–∞–π–ª–∞–º–∏.
    """
    base_path = Path(start_path)
    with open(out_file, "w", encoding="utf-8") as f:
        for root, dirs, files in os.walk(base_path):
            root_path = Path(root)
            level = len(root_path.relative_to(base_path).parts)
            indent = '    ' * level

            if is_ignored(root_path, ignore_patterns, base_path):
                dirs[:] = []
                continue

            f.write(f"{indent}üìÅ {root_path.name}\n")

            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏ (–Ω–µ –≤—ã–≤–æ–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ ‚Äî –æ–Ω–∏ –ø–æ–ø–∞–¥—É—Ç –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ö–æ–¥–µ)
            dirs[:] = [d for d in dirs if not is_ignored(root_path / d, ignore_patterns, base_path)]

            # –ó–∞—Ç–µ–º ‚Äî —Ñ–∞–π–ª—ã
            for file in sorted(files):
                file_path = root_path / file
                if is_ignored(file_path, ignore_patterns, base_path):
                    continue
                f.write(f"{indent}    üìÑ {file}\n")


if __name__ == "__main__":
    here = Path(__file__).resolve().parent
    root = here.parent
    gitignore = root / ".gitignore"
    patterns = load_gitignore_patterns(str(gitignore)) if gitignore.exists() else []

    save_tree(str(root), str(here / "project_structure.txt"), patterns)
