# db_init/crud.py
# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è CRUD —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –û–û–ü –∏ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤ üîß

from typing import Type, TypeVar, Generic, Optional, List
from sqlalchemy.orm import Session
from sqlalchemy.exc import NoResultFound
from db_init.models import Base, ProjType, VesselType, ClassSociety, NewLifeCycle, RefitLifeCycle, ProjTemplates

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–æ–±—â—ë–Ω–Ω—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏
ModelType = TypeVar('ModelType', bound=Base)

class BaseRepository(Generic[ModelType]):
    """
    –ë–∞–∑–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –æ–±—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π CRUD.

    :param model: –∫–ª–∞—Å—Å –º–æ–¥–µ–ª–∏ SQLAlchemy
    :param session: –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy
    """
    def __init__(self, model: Type[ModelType], session: Session) -> None:
        self.model = model
        self.session = session

    def get_all(self) -> List[ModelType]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –º–æ–¥–µ–ª–∏"""
        return self.session.query(self.model).order_by(self.model.id).all()

    def get_by_field(self, field_name: str, value) -> Optional[ModelType]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è –∏–ª–∏ None"""
        try:
            query = self.session.query(self.model)
            return query.filter(getattr(self.model, field_name) == value).one()
        except NoResultFound:
            return None

    def create(self, **kwargs) -> ModelType:
        """
        –°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å.
        """
        instance = self.model(**kwargs)
        self.session.add(instance)
        self.session.flush()  # –ø–æ–ª—É—á–∏—Ç—å id
        return instance

    def get_or_create(self, unique_field: str, value, **kwargs) -> ModelType:
        """
        –°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –ø–æ–ª—é.

        :param unique_field: –∏–º—è –ø–æ–ª—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        :param value: –∑–Ω–∞—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
        :param kwargs: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        :return: –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏
        """
        existing = self.get_by_field(unique_field, value)
        if existing:
            for k, v in kwargs.items():
                setattr(existing, k, v)
            self.session.flush()
            return existing
        return self.create(**{unique_field: value}, **kwargs)

class ProjTypeRepository(BaseRepository[ProjType]):
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ProjType"""
    def __init__(self, session: Session) -> None:
        super().__init__(ProjType, session)

    def get_by_name(self, name: str) -> Optional[ProjType]:
        return self.get_by_field('proj_type_name', name)

    def create_proj_types(self, name: str, description: Optional[str] = None) -> ProjType:
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤ —Ç–∞–±–ª–∏—Ü–µ proj_type.
        :param name: —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
        :param description: –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
        :return: –æ–±—ä–µ–∫—Ç ProjType
        """
        return self.get_or_create('proj_type_name', name, description=description)

class VesselTypeRepository(BaseRepository[VesselType]):
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VesselType"""
    def __init__(self, session: Session) -> None:
        super().__init__(VesselType, session)

    def get_by_name(self, name: str) -> Optional[VesselType]:
        return self.get_by_field('vessel_type_name', name)

    def create_vessel_types(self, name: str, description: Optional[str] = None) -> VesselType:
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤ —Ç–∞–±–ª–∏—Ü–µ vessel_type.
        :param name: —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ç–∏–ø–∞ —Å—É–¥–Ω–∞
        :param description: –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å—É–¥–Ω–∞
        :return: –æ–±—ä–µ–∫—Ç VesselType
        """
        return self.get_or_create('vessel_type_name', name, description=description)

class ClassSocietyRepository(BaseRepository[ClassSociety]):
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ClassSociety"""
    def __init__(self, session: Session) -> None:
        super().__init__(ClassSociety, session)

    def get_by_name(self, name: str) -> Optional[ClassSociety]:
        return self.get_by_field('class_society_name', name)

    def create_class_society_name(self, name: str, description: Optional[str] = None) -> ClassSociety:
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤ —Ç–∞–±–ª–∏—Ü–µ class_society.
        :param name: —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞
        :param description: –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞
        :return: –æ–±—ä–µ–∫—Ç ClassSociety
        """
        return self.get_or_create('class_society_name', name, description=description)

class NewLifeCycleRepository(BaseRepository[NewLifeCycle]):
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å NewLifeCycle"""
    def __init__(self, session: Session) -> None:
        super().__init__(NewLifeCycle, session)

    def get_by_name(self, name: str) -> Optional[NewLifeCycle]:
        return self.get_by_field('new_life_cycle_name', name)

    def create_new_life_cycle_name(self, name: str, description: Optional[str] = None) -> NewLifeCycle:
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤ —Ç–∞–±–ª–∏—Ü–µ new_life_cycle.
        :param name: —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        :param description: –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        :return: –æ–±—ä–µ–∫—Ç NewLifeCycle
        """
        return self.get_or_create('new_life_cycle_name', name, description=description)

class RefitLifeCycleRepository(BaseRepository[RefitLifeCycle]):
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RefitLifeCycle"""
    def __init__(self, session: Session) -> None:
        super().__init__(RefitLifeCycle, session)

    def get_by_name(self, name: str) -> Optional[RefitLifeCycle]:
        return self.get_by_field('refit_life_cycle_name', name)

    def create_refit_life_cycle_name(self, name: str, description: Optional[str] = None) -> RefitLifeCycle:
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤ —Ç–∞–±–ª–∏—Ü–µ refit_life_cycle.
        :param name: —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (—Ä–µ–º–æ–Ω—Ç)
        :param description: –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (—Ä–µ–º–æ–Ω—Ç)
        :return: –æ–±—ä–µ–∫—Ç RefitLifeCycle
        """
        return self.get_or_create('refit_life_cycle_name', name, description=description)

class ProjTemplateRepository(BaseRepository[ProjTemplates]):
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ProjTemplates"""
    def __init__(self, session: Session) -> None:
        super().__init__(ProjTemplates, session)

    def get_by_name(self, name: str) -> Optional[ProjTemplates]:
        return self.get_by_field('proj_template_name_ru', name)

    def create_proj_template(
        self,
        part_rules: Optional[str],
        name_ru: str,
        name_en: Optional[str],
        path: str,
        reviewed: Optional[str],
        description: Optional[str] = None
    ) -> ProjTemplates:
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤ —Ç–∞–±–ª–∏—Ü–µ proj_templates.
        :param name_ru: —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —à–∞–±–ª–æ–Ω–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        :param name_en: —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        :param path: —Å–µ—Ç–µ–≤–æ–π –ø—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É
        :param reviewed: —Ñ–ª–∞–≥ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
        :param description: –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        :return: –æ–±—ä–µ–∫—Ç ProjTemplates
        """
        return self.get_or_create(
            'proj_template_name_ru',
            name_ru,
            part_rules=part_rules,
            proj_template_name_en=name_en,
            proj_template_path=path,
            proj_template_reviewed_=reviewed,
            description=description
        )
