# db/session.py
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ SQLAlchemy Session üéõÔ∏è

from typing import Generator, Optional
from sqlalchemy.orm import sessionmaker, Session
from db.connection import get_engine
from utils.logger import LoggerManager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è
logger = LoggerManager(__name__).get_logger()

# –°–æ–∑–¥–∞—ë–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
SessionLocal = sessionmaker(
    bind=get_engine(),
    autocommit=False,
    autoflush=False,
    future=True
)

def get_db() -> Generator[Session, None, None]:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ SQLAlchemy –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä:
    with get_db() as session:
        ...
    """
    db: Optional[Session] = None
    try:
        db = SessionLocal()
        logger.info("üìÇ New database session opened")
        yield db
        db.commit()
        logger.info("‚úÖ Database session committed")
    except Exception as e:
        if db:
            db.rollback()
            logger.error(f"üîÑ Rollback session due to error: {e}")
        raise
    finally:
        if db:
            db.close()
            logger.info("üîí Database session closed")
