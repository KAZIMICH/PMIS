# db_init/seed.py
# –°–∫—Ä–∏–ø—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (seeding) üå±

import db_init.company.seed_company as company
import db_init.seed_proj_attr as proj_attr
import db_init.catalogs.seed_catalogs as catalogs
from sqlalchemy import create_engine
from sqlalchemy.engine import Engine
from utils.logger import LoggerManager
from db_init.new_vessel_proj.models import Base  # üìÇ –ò–º–ø–æ—Ä—Ç –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑—ã –º–æ–¥–µ–ª–µ–π
from db_init.config import DATABASE_URL  # URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite –ë–î (—Ñ–∞–π–ª)


class DBInitializer:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite –ë–î –ø—Ä–æ–µ–∫—Ç–∞:
      - —Å–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª –ë–î, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      - —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–µ–π
    """

    def __init__(
        self,
        db_url: str = DATABASE_URL,
    ) -> None:
        """
        :param db_url: URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite –ë–î (—Ñ–∞–π–ª)
        """
        self.logger = LoggerManager(__name__).get_logger()
        self.db_url: str = db_url
        self.logger.info(f"üöÄ DBInitializer —Å–æ–∑–¥–∞–Ω–æ —Å URL={self.db_url}")
        self.engine: Engine | None = None  # Engine –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î

    def get_engine(self) -> Engine:
        """
        –°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç SQLAlchemy Engine –¥–ª—è SQLite.
        """
        if self.engine is None:
            self.engine = create_engine(
                self.db_url,
                connect_args={"check_same_thread": False},
                future=True,
            )
            self.logger.info(f"üî• Engine —Å–æ–∑–¥–∞–Ω –¥–ª—è SQLite {self.db_url}")
        return self.engine

    def create_tables(self) -> None:
        """
        –°–æ–∑–¥–∞—ë—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ metadata Base.
        """
        engine = self.get_engine()
        Base.metadata.create_all(engine)
        self.logger.info("üì¶ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    def run(self) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞: —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ SQLite –ë–î.
        """
        self.logger.info("üèÅ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é SQLite –ë–î")
        self.create_tables()
        self.logger.info("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def run() -> None:
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ seed
    """
    DBInitializer().run()

    company.seed_users()
    company.seed_departments()
    company.seed_roles()

    proj_attr.seed_proj_types()
    proj_attr.seed_proj_status()
    proj_attr.seed_new_life_cycle()
    proj_attr.seed_refit_life_cycle()
    proj_attr.seed_proj_template()

    catalogs.seed_vessel_types()
    catalogs.seed_class_societys()


if __name__ == "__main__":
    run()




